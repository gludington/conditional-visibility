import { debug, error, info } from "../lib/lib";

export class AutoSkillsDialog extends Dialog {
  /*
      Overwrite
      //data
        users => ids or names of users to send messages to
      //options
        skipDialog => option to skip dialog and immediately send to all users or specified users
        chatWhisper => option to send dialog content to a whisper in the chatMessage system as well
    */
  constructor(data, options:any) {
    super(options);
    this.data = data;

    /*
        Build Data
      */
    this.data.buttons = {
      Submit: { label: settings.i18n('wd.dialog.button.submit'), icon: `` },
      Cancel: { label: settings.i18n('wd.dialog.button.cancel'), icon: `` },
    };
    this.data.default = 'Submit';
    this.data.users = this.data?.users ?? [];
    debug(this.data);
    this.data.users = game.users
      .filter((user) => user.active && user.id !== game.userId)
      .map((user) => {
        const data = { id: user.id, checked: '', name: user.name };
        if (this.data.users.includes(user.id)) data.checked = 'checked';
        return data;
      });

    /*
        Build Options
      */
    this.options.skipDialog = !!options?.skipDialog;
    this.options.chatWhisper = !!options?.chatWhisper;

    if (this.data.users.length === 0) return error(settings.i18n('wd.dialog.noUserError'));
    if (settings.value('gmOnly') && !game.user.isGM) return error(settings.i18n('wd.dialog.notGMError'));

    /*
        Emit Data or Display Dialog
      */
    if (this.options.skipDialog)
      AutoSkillsDialog.emitData({
        users:
          this.data.users.length === 0 ? game.users.map((user) => user.id) : this.data.users.map((user) => user.id),
        content: this.data.content,
        whisper: this.options.chatWhisper,
      });
    else {
      this.render(true);
    }
  }

  static get defaultOptions() {
    return foundry.utils.mergeObject(super.defaultOptions, {
      template: `modules/${settings.NAME}/templates/autoSkillsDialog.html`,
      classes: [settings.KEY],
      jQuery: true,
      width: 600,
    });
  }

  get title() {
    return this.data.title || settings.TITLE;
  }

  getData(options) {
    const data = super.getData(options);
    data.users = this.data.users;
    return data;
  }

  submit(button) {
    try {
      const element = this.options.jQuery ? this.element : this.element[0];

      debug('Submit | Button  | ', button);
      debug('Submit | Element | ', element);
      debug('Submit | Data    | ', this.data);
      debug('Submit | Options | ', this.options);

      if (button.label === 'Submit')
        AutoSkillsDialog.emitData({
          users: Array.from(element.find('[name=user]'))
            .filter((ele) => ele.checked)
            .map((ele) => ele.id),
          content: element.find('[name=content]')[0].value,
          whisper: element.find('[name=whisper]')[0].checked,
        });
    } catch (err) {
      error(err);
    }
    this.close();
  }

  static async confirm({ content, sender }) {
    Dialog.confirm({
      title: `Whisper Dialog Message From : ${game.users?.get(sender)?.name}`,
      yes: () => AutoSkillsDialog.emitResponse({ response: true, users: [sender] }),
      no: () => AutoSkillsDialog.emitResponse({ response: true, users: [sender] }),
      content: content,
    });
  }

  /*
      Dead Methods
    */
  static async prompt({ response, sender }) {
    Dialog.prompt({
      title: 'Whisper Dialog Response',
      content: `User : ${game.users?.get(sender)?.name}<br><b>Response : ${response ? 'Confirm' : 'Reject'}</b>`,
      callback: () => {},
    });
  }

  /*
      Module Methods
    */
  static register() {
    info('Registering Socket Access');
    game.socket.on(`module.${settings.NAME}`, AutoSkillsDialog.recieveData);
    info('Registering Window Access');
    window[settings.KEY] = AutoSkillsDialog;
  }

  static recieveData({ users, content, type, response, sender }) {
    debug('Recieve Data | Users    | ', users);
    debug('Recieve Data | Sender   | ', sender);
    debug('Recieve Data | Content  | ', content);
    debug('Recieve Data | Response | ', response);
    debug('Recieve Data | Type     | ', type);

    if (!users.includes(game.userId)) return;

    if (type === 'original') {
      AutoSkillsDialog.confirm({ content, sender });
    }
    if (type === 'response') {
      AutoSkillsDialog.prompt({ response, sender });
    }
  }

  static emitData({ users, content, whisper } = {}) {
    debug('Emit Data | Users   | ', users);
    debug('Emit Data | Content | ', content);
    debug('Emit Data | Whisper | ', whisper);

    if (whisper){
      ChatMessage.create({
        content,
        whisper: users,
      });
    }
    debug('Attempting to Emit Data', users, content);
    game.socket.emit(`module.${settings.NAME}`, { users, content, type: 'original', sender: game.userId });
    debug('Data Emitted');
  }

  static emitResponse({ response, users }) {
    if (!settings.value('response')) return;
    debug('Attempting to Emit Response', response);
    game.socket.emit(`module.${settings.NAME}`, { response, type: 'response', sender: game.userId, users });
    debug('Data Emitted');
  }

  static renderWhisperIcon(app, HTML, options) {
    if (
      !settings.value('icon') ||
      (settings.value('gmOnly') && !game.user.isGM) ||
      (app.id !== 'chat' && app.id !== 'chat-popout')
    )
      return;

    info('Registering Whisper Icon');

    const element = $(`    
      <a class="chat-control-icon whisper-dialog" title="whisper selected players" id ="${app.id}-whisper-dialog" style="margin-right: 7px">
        <i class="fas fa-user-secret"></i>
      </a>`);

    HTML.find('#chat-controls label:first').before(element);

    /* check if AutoSkillsDialog is Open first */
    $(`#${app.id}-whisper-dialog`).click(() => new AutoSkillsDialog({}, {}));
  }
}
